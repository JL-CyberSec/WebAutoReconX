<?php

namespace App\Filament\Resources;

use App\Filament\Resources\PentestingResource\Pages;
use App\Filament\Resources\ProjectResource\RelationManagers\ScansRelationManager;
use App\Models\Pentesting;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Filament\Tables\Actions\Action;

class PentestingResource extends Resource
{
    protected static ?string $model = Pentesting::class;

    protected static ?string $navigationIcon = 'heroicon-o-bug-ant';

    protected static ?int $navigationSort = 2;

    public static function form(Form $form): Form
    {
        return $form
            ->schema(Pentesting::getForm(request()->route()->parameter('projectId')));
    }

    public static function table(Table $table): Table
    {
        $hasProject = !empty(request()->route()->parameter('projectId'));

        return $table
            ->columns([
                Tables\Columns\TextColumn::make('project.title')
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: $hasProject),
                Tables\Columns\TextColumn::make('title')
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('description')
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('count_scans')
                    ->label('Scans')
                    ->sortable()
                    ->color('success')
                    ->url(function (Pentesting $record) {
                        return route('filament.admin.resources.scans.index', [
                            'pentestingId' => $record->id,
                        ]);
                    }),
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('deleted_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true)
            ])
            ->filters([
                Tables\Filters\TrashedFilter::make(),
            ])
            ->actions([
                Tables\Actions\ViewAction::make(),
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                    Tables\Actions\ForceDeleteBulkAction::make(),
                    Tables\Actions\RestoreBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            ScansRelationManager::class
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListPentestings::route('/list/{projectId?}'),
            'create' => Pages\CreatePentesting::route('/create/{projectId?}'),
            'view' => Pages\ViewPentesting::route('/{record}'),
            'edit' => Pages\EditPentesting::route('/{record}/edit'),
        ];
    }

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()
            ->withoutGlobalScopes([
                SoftDeletingScope::class,
            ])->when(!empty(request()->route()->parameter('projectId')), function ($query) {
                return $query->where('project_id', request()->route()->parameter('projectId'));
            });
    }
}
